namespace MauigRPC;

/// <summary>
/// The main application class for the MAUI application.
/// Manages the application lifecycle and creates the main application window.
/// </summary>
/// <remarks>
/// This class inherits from the MAUI Application base class and provides:
/// - Application-level event handlers (OnStart, OnSleep, OnResume)
/// - Window creation and management
/// - Navigation shell initialization
/// 
/// The App class is instantiated automatically by the MAUI framework during application startup
/// after MauiProgram.CreateMauiApp() completes.
/// 
/// Lifecycle events:
/// - Constructor: Called once when the application starts
/// - CreateWindow: Called to create the main application window
/// - OnStart: Called after the window is created
/// - OnSleep: Called when the app moves to background
/// - OnResume: Called when the app returns from background
/// </remarks>
public partial class App : Application
{
    /// <summary>
    /// Initializes a new instance of the App class.
    /// </summary>
    /// <remarks>
    /// The constructor is called automatically by the MAUI framework during application startup.
    /// InitializeComponent() is generated by XAML compilation and initializes the application's
    /// XAML-defined resources (styles, colors, etc.) from App.xaml.
    /// </remarks>
    public App()
    {
        InitializeComponent();
    }

    /// <summary>
    /// Creates the main application window with the AppShell navigation container.
    /// </summary>
    /// <param name="activationState">
    /// Optional activation state information passed when the window is created.
    /// Contains platform-specific data about how the application was activated.
    /// </param>
    /// <returns>A new Window instance containing the AppShell as its content.</returns>
    /// <remarks>
    /// This method is called by the MAUI framework to create the main application window.
    /// 
    /// <strong>Window Creation Process:</strong>
    /// 1. Framework calls CreateWindow with activation state
    /// 2. Creates new Window instance
    /// 3. Sets AppShell as the window's content (navigation container)
    /// 4. Returns window to framework
    /// 5. Framework displays the window with MainPage as initial route
    /// 
    /// <strong>AppShell Purpose:</strong>
    /// AppShell provides the navigation structure for the application:
    /// - Defines available routes and pages
    /// - Manages navigation stack
    /// - Provides URI-based navigation
    /// - Handles flyout menu (if configured)
    /// - Manages tabs (if configured)
    /// 
    /// <strong>Multi-Window Support:</strong>
    /// MAUI supports multiple windows (desktop scenarios).
    /// Each time a new window is requested, this method is called again.
    /// The activationState parameter helps determine why the window was created.
    /// </remarks>
    protected override Window CreateWindow(IActivationState? activationState)
    {
        return new Window(new AppShell());
    }
}
